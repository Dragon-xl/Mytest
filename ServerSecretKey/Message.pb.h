// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message_2eproto;
class ResponseMsg;
struct ResponseMsgDefaultTypeInternal;
extern ResponseMsgDefaultTypeInternal _ResponseMsg_default_instance_;
class ResquestMsg;
struct ResquestMsgDefaultTypeInternal;
extern ResquestMsgDefaultTypeInternal _ResquestMsg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ResponseMsg* Arena::CreateMaybeMessage<::ResponseMsg>(Arena*);
template<> ::ResquestMsg* Arena::CreateMaybeMessage<::ResquestMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ResquestMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResquestMsg) */ {
 public:
  inline ResquestMsg() : ResquestMsg(nullptr) {}
  ~ResquestMsg() override;
  explicit PROTOBUF_CONSTEXPR ResquestMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResquestMsg(const ResquestMsg& from);
  ResquestMsg(ResquestMsg&& from) noexcept
    : ResquestMsg() {
    *this = ::std::move(from);
  }

  inline ResquestMsg& operator=(const ResquestMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResquestMsg& operator=(ResquestMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResquestMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResquestMsg* internal_default_instance() {
    return reinterpret_cast<const ResquestMsg*>(
               &_ResquestMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResquestMsg& a, ResquestMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ResquestMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResquestMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResquestMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResquestMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResquestMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResquestMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResquestMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResquestMsg";
  }
  protected:
  explicit ResquestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIDFieldNumber = 2,
    kServerIDFieldNumber = 3,
    kSignFieldNumber = 4,
    kDataFieldNumber = 5,
    kCmdFieldNumber = 1,
  };
  // bytes clientID = 2;
  void clear_clientid();
  const std::string& clientid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientid();
  PROTOBUF_NODISCARD std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // bytes serverID = 3;
  void clear_serverid();
  const std::string& serverid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverid();
  PROTOBUF_NODISCARD std::string* release_serverid();
  void set_allocated_serverid(std::string* serverid);
  private:
  const std::string& _internal_serverid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverid(const std::string& value);
  std::string* _internal_mutable_serverid();
  public:

  // bytes sign = 4;
  void clear_sign();
  const std::string& sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign();
  PROTOBUF_NODISCARD std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 cmd = 1;
  void clear_cmd();
  int32_t cmd() const;
  void set_cmd(int32_t value);
  private:
  int32_t _internal_cmd() const;
  void _internal_set_cmd(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResquestMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int32_t cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class ResponseMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResponseMsg) */ {
 public:
  inline ResponseMsg() : ResponseMsg(nullptr) {}
  ~ResponseMsg() override;
  explicit PROTOBUF_CONSTEXPR ResponseMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseMsg(const ResponseMsg& from);
  ResponseMsg(ResponseMsg&& from) noexcept
    : ResponseMsg() {
    *this = ::std::move(from);
  }

  inline ResponseMsg& operator=(const ResponseMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseMsg& operator=(ResponseMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseMsg* internal_default_instance() {
    return reinterpret_cast<const ResponseMsg*>(
               &_ResponseMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResponseMsg& a, ResponseMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResponseMsg";
  }
  protected:
  explicit ResponseMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIDFieldNumber = 2,
    kServerIDFieldNumber = 3,
    kDataFieldNumber = 5,
    kStatusFieldNumber = 1,
    kSeckeyIDFieldNumber = 4,
  };
  // bytes clientID = 2;
  void clear_clientid();
  const std::string& clientid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientid();
  PROTOBUF_NODISCARD std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // bytes serverID = 3;
  void clear_serverid();
  const std::string& serverid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverid();
  PROTOBUF_NODISCARD std::string* release_serverid();
  void set_allocated_serverid(std::string* serverid);
  private:
  const std::string& _internal_serverid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverid(const std::string& value);
  std::string* _internal_mutable_serverid();
  public:

  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // int32 seckeyID = 4;
  void clear_seckeyid();
  int32_t seckeyid() const;
  void set_seckeyid(int32_t value);
  private:
  int32_t _internal_seckeyid() const;
  void _internal_set_seckeyid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResponseMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  bool status_;
  int32_t seckeyid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResquestMsg

// int32 cmd = 1;
inline void ResquestMsg::clear_cmd() {
  cmd_ = 0;
}
inline int32_t ResquestMsg::_internal_cmd() const {
  return cmd_;
}
inline int32_t ResquestMsg::cmd() const {
  // @@protoc_insertion_point(field_get:ResquestMsg.cmd)
  return _internal_cmd();
}
inline void ResquestMsg::_internal_set_cmd(int32_t value) {
  
  cmd_ = value;
}
inline void ResquestMsg::set_cmd(int32_t value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:ResquestMsg.cmd)
}

// bytes clientID = 2;
inline void ResquestMsg::clear_clientid() {
  clientid_.ClearToEmpty();
}
inline const std::string& ResquestMsg::clientid() const {
  // @@protoc_insertion_point(field_get:ResquestMsg.clientID)
  return _internal_clientid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResquestMsg::set_clientid(ArgT0&& arg0, ArgT... args) {
 
 clientid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResquestMsg.clientID)
}
inline std::string* ResquestMsg::mutable_clientid() {
  std::string* _s = _internal_mutable_clientid();
  // @@protoc_insertion_point(field_mutable:ResquestMsg.clientID)
  return _s;
}
inline const std::string& ResquestMsg::_internal_clientid() const {
  return clientid_.Get();
}
inline void ResquestMsg::_internal_set_clientid(const std::string& value) {
  
  clientid_.Set(value, GetArenaForAllocation());
}
inline std::string* ResquestMsg::_internal_mutable_clientid() {
  
  return clientid_.Mutable(GetArenaForAllocation());
}
inline std::string* ResquestMsg::release_clientid() {
  // @@protoc_insertion_point(field_release:ResquestMsg.clientID)
  return clientid_.Release();
}
inline void ResquestMsg::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocated(clientid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (clientid_.IsDefault()) {
    clientid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResquestMsg.clientID)
}

// bytes serverID = 3;
inline void ResquestMsg::clear_serverid() {
  serverid_.ClearToEmpty();
}
inline const std::string& ResquestMsg::serverid() const {
  // @@protoc_insertion_point(field_get:ResquestMsg.serverID)
  return _internal_serverid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResquestMsg::set_serverid(ArgT0&& arg0, ArgT... args) {
 
 serverid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResquestMsg.serverID)
}
inline std::string* ResquestMsg::mutable_serverid() {
  std::string* _s = _internal_mutable_serverid();
  // @@protoc_insertion_point(field_mutable:ResquestMsg.serverID)
  return _s;
}
inline const std::string& ResquestMsg::_internal_serverid() const {
  return serverid_.Get();
}
inline void ResquestMsg::_internal_set_serverid(const std::string& value) {
  
  serverid_.Set(value, GetArenaForAllocation());
}
inline std::string* ResquestMsg::_internal_mutable_serverid() {
  
  return serverid_.Mutable(GetArenaForAllocation());
}
inline std::string* ResquestMsg::release_serverid() {
  // @@protoc_insertion_point(field_release:ResquestMsg.serverID)
  return serverid_.Release();
}
inline void ResquestMsg::set_allocated_serverid(std::string* serverid) {
  if (serverid != nullptr) {
    
  } else {
    
  }
  serverid_.SetAllocated(serverid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serverid_.IsDefault()) {
    serverid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResquestMsg.serverID)
}

// bytes sign = 4;
inline void ResquestMsg::clear_sign() {
  sign_.ClearToEmpty();
}
inline const std::string& ResquestMsg::sign() const {
  // @@protoc_insertion_point(field_get:ResquestMsg.sign)
  return _internal_sign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResquestMsg::set_sign(ArgT0&& arg0, ArgT... args) {
 
 sign_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResquestMsg.sign)
}
inline std::string* ResquestMsg::mutable_sign() {
  std::string* _s = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:ResquestMsg.sign)
  return _s;
}
inline const std::string& ResquestMsg::_internal_sign() const {
  return sign_.Get();
}
inline void ResquestMsg::_internal_set_sign(const std::string& value) {
  
  sign_.Set(value, GetArenaForAllocation());
}
inline std::string* ResquestMsg::_internal_mutable_sign() {
  
  return sign_.Mutable(GetArenaForAllocation());
}
inline std::string* ResquestMsg::release_sign() {
  // @@protoc_insertion_point(field_release:ResquestMsg.sign)
  return sign_.Release();
}
inline void ResquestMsg::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocated(sign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sign_.IsDefault()) {
    sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResquestMsg.sign)
}

// bytes data = 5;
inline void ResquestMsg::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ResquestMsg::data() const {
  // @@protoc_insertion_point(field_get:ResquestMsg.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResquestMsg::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResquestMsg.data)
}
inline std::string* ResquestMsg::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ResquestMsg.data)
  return _s;
}
inline const std::string& ResquestMsg::_internal_data() const {
  return data_.Get();
}
inline void ResquestMsg::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* ResquestMsg::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* ResquestMsg::release_data() {
  // @@protoc_insertion_point(field_release:ResquestMsg.data)
  return data_.Release();
}
inline void ResquestMsg::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResquestMsg.data)
}

// -------------------------------------------------------------------

// ResponseMsg

// bool status = 1;
inline void ResponseMsg::clear_status() {
  status_ = false;
}
inline bool ResponseMsg::_internal_status() const {
  return status_;
}
inline bool ResponseMsg::status() const {
  // @@protoc_insertion_point(field_get:ResponseMsg.status)
  return _internal_status();
}
inline void ResponseMsg::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ResponseMsg::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ResponseMsg.status)
}

// bytes clientID = 2;
inline void ResponseMsg::clear_clientid() {
  clientid_.ClearToEmpty();
}
inline const std::string& ResponseMsg::clientid() const {
  // @@protoc_insertion_point(field_get:ResponseMsg.clientID)
  return _internal_clientid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseMsg::set_clientid(ArgT0&& arg0, ArgT... args) {
 
 clientid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResponseMsg.clientID)
}
inline std::string* ResponseMsg::mutable_clientid() {
  std::string* _s = _internal_mutable_clientid();
  // @@protoc_insertion_point(field_mutable:ResponseMsg.clientID)
  return _s;
}
inline const std::string& ResponseMsg::_internal_clientid() const {
  return clientid_.Get();
}
inline void ResponseMsg::_internal_set_clientid(const std::string& value) {
  
  clientid_.Set(value, GetArenaForAllocation());
}
inline std::string* ResponseMsg::_internal_mutable_clientid() {
  
  return clientid_.Mutable(GetArenaForAllocation());
}
inline std::string* ResponseMsg::release_clientid() {
  // @@protoc_insertion_point(field_release:ResponseMsg.clientID)
  return clientid_.Release();
}
inline void ResponseMsg::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocated(clientid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (clientid_.IsDefault()) {
    clientid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResponseMsg.clientID)
}

// bytes serverID = 3;
inline void ResponseMsg::clear_serverid() {
  serverid_.ClearToEmpty();
}
inline const std::string& ResponseMsg::serverid() const {
  // @@protoc_insertion_point(field_get:ResponseMsg.serverID)
  return _internal_serverid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseMsg::set_serverid(ArgT0&& arg0, ArgT... args) {
 
 serverid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResponseMsg.serverID)
}
inline std::string* ResponseMsg::mutable_serverid() {
  std::string* _s = _internal_mutable_serverid();
  // @@protoc_insertion_point(field_mutable:ResponseMsg.serverID)
  return _s;
}
inline const std::string& ResponseMsg::_internal_serverid() const {
  return serverid_.Get();
}
inline void ResponseMsg::_internal_set_serverid(const std::string& value) {
  
  serverid_.Set(value, GetArenaForAllocation());
}
inline std::string* ResponseMsg::_internal_mutable_serverid() {
  
  return serverid_.Mutable(GetArenaForAllocation());
}
inline std::string* ResponseMsg::release_serverid() {
  // @@protoc_insertion_point(field_release:ResponseMsg.serverID)
  return serverid_.Release();
}
inline void ResponseMsg::set_allocated_serverid(std::string* serverid) {
  if (serverid != nullptr) {
    
  } else {
    
  }
  serverid_.SetAllocated(serverid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serverid_.IsDefault()) {
    serverid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResponseMsg.serverID)
}

// int32 seckeyID = 4;
inline void ResponseMsg::clear_seckeyid() {
  seckeyid_ = 0;
}
inline int32_t ResponseMsg::_internal_seckeyid() const {
  return seckeyid_;
}
inline int32_t ResponseMsg::seckeyid() const {
  // @@protoc_insertion_point(field_get:ResponseMsg.seckeyID)
  return _internal_seckeyid();
}
inline void ResponseMsg::_internal_set_seckeyid(int32_t value) {
  
  seckeyid_ = value;
}
inline void ResponseMsg::set_seckeyid(int32_t value) {
  _internal_set_seckeyid(value);
  // @@protoc_insertion_point(field_set:ResponseMsg.seckeyID)
}

// bytes data = 5;
inline void ResponseMsg::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ResponseMsg::data() const {
  // @@protoc_insertion_point(field_get:ResponseMsg.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseMsg::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResponseMsg.data)
}
inline std::string* ResponseMsg::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ResponseMsg.data)
  return _s;
}
inline const std::string& ResponseMsg::_internal_data() const {
  return data_.Get();
}
inline void ResponseMsg::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* ResponseMsg::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* ResponseMsg::release_data() {
  // @@protoc_insertion_point(field_release:ResponseMsg.data)
  return data_.Release();
}
inline void ResponseMsg::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResponseMsg.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message_2eproto
